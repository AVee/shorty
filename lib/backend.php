<?php
/**
* @package shorty an ownCloud url shortener plugin
* @category internet
* @author Christian Reiner
* @copyright 2011-2012 Christian Reiner <foss@christian-reiner.info>
* @license GNU Affero General Public license (AGPL)
* @link information 
* @link repository https://svn.christian-reiner.info/svn/app/oc/shorty
*
* This library is free software; you can redistribute it and/or
* modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE
* License as published by the Free Software Foundation; either
* version 3 of the license, or any later version.
*
* This library is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU AFFERO GENERAL PUBLIC LICENSE for more details.
*
* You should have received a copy of the GNU Affero General Public
* License along with this library.
* If not, see <http://www.gnu.org/licenses/>.
*
*/

/**
 * @file lib/backend.php
 * Routines to use rmeote (online) shortening services as backends in a local workflow
 * @author Christian Reiner
 */

/**
 * @class OC_Shorty_Backend
 * @brief Library to register urls using backends, typically remote (online) url shortening services
 * @access public
 * @author Christian Reiner
 */
class OC_Shorty_Backend
{
  /**
   * @method OC_Shorty_Backend::registerUrl
   * @brief Wrapper function around the specific backend routines
   * @param key (string) Internal shorty key used to reference a shorty upon usage. 
   * @returns (string) The shortened url as generated by a specific backend.
   * @throws OC_Shorty_Exception taking over the explaining of the failure from the specific backend
   * @access public
   * @author Christian Reiner
   */
  static function registerUrl ( $key )
  {
    try
    {
      // construct the $relay, the url to be called to reach THIS service (ownclouds shorty plugin)
      $relay = sprintf ( '%s://%s%s', (isset($_SERVER["HTTPS"])&&'on'==$_SERVER["HTTPS"])?'https':'http',
                                      $_SERVER['SERVER_NAME'],
                                      OC_Helper::linkTo('shorty','forward.php?'.$key) );
      // call backend specific work horse
      switch ( $type=OC_Preferences::getValue(OC_User::getUser(),'shorty','backend-type','') )
      {
        default:        return OC_Shorty_Backend::registerUrl_default ( $key, $relay );
        case 'static':  return OC_Shorty_Backend::registerUrl_static  ( $key, $relay );
        case 'google':  return OC_Shorty_Backend::registerUrl_google  ( $key, $relay );
        case 'tinyurl': return OC_Shorty_Backend::registerUrl_tinyurl ( $key, $relay );
        case 'isgd':    return OC_Shorty_Backend::registerUrl_isgd    ( $key, $relay );
        case 'bitly':   return OC_Shorty_Backend::registerUrl_bitly   ( $key, $relay );
      } // switch
    } // try
    catch (OC_Shorty_Exception $e)
    {
      throw $e;
    } // catch
    catch (Exception $e)
    {
      throw new OC_Shorty_Exception ( "Failed to register url '%s' at '%s' backend", array($relay,$type) );
    } // catch
  } // OC_Shorty_Backend::registerUrl

  /**
   * @method OC_Shorty_Backend::registerUrl_default
   * @brief Pseudo-registers a given local relay url
   * @param key (string)
   * @param relay (url)
   * @returns validated and pseudo-registered relay
   * @access public
   * @author Chrisian Reiner
   */
  static function registerUrl_default ( $key, $relay )
  {
    return OC_Shorty_Type::validate ( $relay, OC_Shorty_Type::URL );
  } // OC_Shorty_Backend::registerUrl_default
  
  /**
   * @method OC_Shorty_Backend::registerUrl_static
   * @brief Registers a given local relay url as local static shorty
   * @param key (string)
   * @param relay (url)
   * @returns registered and validated relay url
   * @access public
   * @author Chrisian Reiner
   */
  static function registerUrl_static ( $key, $relay )
  {
    $base = trim ( OC_Appconfig::getValue('shorty','backend-static-base',FALSE) );
    return OC_Shorty_Type::validate ( $base.$key, OC_Shorty_Type::URL );
  } // OC_Shorty_Backend::registerUrl_static
  
  /**
   * @method OC_Shorty_Backend::registerUrl_google
   * @brief Registers a given local relay url at the google shortening service
   * @param key (string)
   * @param relay (url)
   * @returns registered and validated relay url
   * @access public
   * @author Chrisian Reiner
   */
  static function registerUrl_google ( $key, $relay )
  {
    $curl = curl_init ( );
    curl_setopt ( $curl, CURLOPT_URL, 'https://www.googleapis.com/urlshortener/v1/url' );
    curl_setopt ( $curl, CURLOPT_SSL_VERIFYHOST, TRUE );
    curl_setopt ( $curl, CURLOPT_POST, TRUE );
    curl_setopt ( $curl, CURLOPT_POSTFIELDS, array('long_url'=>$relay,
                                                   'key'=>OC_Preferences::getValue(OC_User::getUser(),'shorty','backend-google-key','')) );
    curl_setopt ( $curl, CURLOPT_RETURNTRANSFER, TRUE );
    if (  (FALSE===($reply=curl_exec($curl)))
        ||( ! preg_match( '/^(.+)$/', $reply, $match )) )
      throw new OC_Shorty_Exception ( 'Failed to register url at backend' );
    curl_close ( $curl );
    return OC_Shorty_Type::validate ( $match[1], OC_Shorty_Type::URL );
  } // OC_Shorty_Backend::registerUrl_google
  
  /**
   * @method OC_Shorty_Backend::registerUrl_tinyul
   * @brief Registers a given local relay url at the tinyURL shortening service
   * @param key (string)
   * @param relay (url)
   * @returns registered and validated relay url
   * @access public
   * @author Chrisian Reiner
   */
  static function registerUrl_tinyurl ( $key, $relay )
  {
    $curl = curl_init ( );
    curl_setopt ( $curl, CURLOPT_URL, sprintf('http://tinyurl.com/api-create.php?url=%s', urlencode(trim($relay))) );
    curl_setopt ( $curl, CURLOPT_RETURNTRANSFER, TRUE );
    if (  (FALSE===($reply=curl_exec($curl)))
        ||( ! preg_match( '/^(.+)$/', $reply, $match )) )
      throw new OC_Shorty_Exception ( 'Failed to register url at backend' );
    curl_close ( $curl );
    return OC_Shorty_Type::validate ( $match[1], OC_Shorty_Type::URL );
  } // OC_Shorty_Backend::registerUrl_tinyurl

  /**
   * @method OC_Shorty_Backend::registerUrl_isgd
   * @brief Registers a given local relay url at the is.gd shortening service
   * @param key (string)
   * @param relay (url)
   * @returns registered and validated relay url
   * @access public
   * @author Chrisian Reiner
   */
  static function registerUrl_isgd ( $key, $relay )
  {
    $curl = curl_init ( );
    curl_setopt ( $curl, CURLOPT_URL, sprintf('http://is.gd/create.php?format=simple&url=%s', urlencode(trim($relay))) );
    curl_setopt ( $curl, CURLOPT_RETURNTRANSFER, TRUE );
    if (  (FALSE===($reply=curl_exec($curl)))
        ||( ! preg_match( '/^(.+)$/', $reply, $match )) )
      throw new OC_Shorty_Exception ( 'Failed to register url at backend' );
    curl_close ( $curl );
    return OC_Shorty_Type::validate ( $match[1], OC_Shorty_Type::URL );
  } // OC_Shorty_Backend::registerUrl_isgd

  /**
   * @method OC_Shorty_Backend::registerUrl_bitly
   * @brief Registers a given local relay url at the bit.ly shortening service
   * @param key (string)
   * @param relay (url)
   * @returns registered and validated relay url
   * @access public
   * @author Chrisian Reiner
   */
  static function registerUrl_bitly ( $key, $relay )
  {
    $curl = curl_init ( );
    curl_setopt ( $curl, CURLOPT_URL, sprintf('http://is.gd/create.php?format=simple&login=%s&apiKey=%s&url=%s',
                                              urlencode(OC_Preferences::getValue(OC_User::getUser(),'shorty','backend-bitly-user','')),
                                              urlencode(OC_Preferences::getValue(OC_User::getUser(),'shorty','backend-bitly-key','')),
                                              urlencode(trim($relay))) );
    curl_setopt ( $curl, CURLOPT_RETURNTRANSFER, TRUE );
    if (  (FALSE===($reply=curl_exec($curl)))
        ||( ! preg_match( '/^(.+)$/', $reply, $match )) )
      throw new OC_Shorty_Exception ( 'Failed to register url at backend' );
    curl_close ( $curl );
    return OC_Shorty_Type::validate ( $match[1], OC_Shorty_Type::URL );
  } // OC_Shorty_Backend::registerUrl_bitly

} // class OC_Shorty_Backend
